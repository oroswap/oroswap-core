{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This structure stores general parameters for the contract.",
  "type": "object",
  "required": [
    "oro_token",
    "factory_contract",
    "owner"
  ],
  "properties": {
    "oro_token": {
      "description": "The ORO token asset info",
      "allOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        }
      ]
    },
    "collect_cooldown": {
      "description": "If set defines the period when maker collect can be called",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "default_bridge": {
      "description": "Default bridge asset (Terra1 - LUNC, Terra2 - LUNA, etc.)",
      "anyOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "factory_contract": {
      "description": "The factory contract address",
      "type": "string"
    },
    "governance_contract": {
      "description": "The governance contract address (fee distributor for vxORO)",
      "type": [
        "string",
        "null"
      ]
    },
    "governance_percent": {
      "description": "The percentage of fees that go to governance_contract",
      "anyOf": [
        {
          "$ref": "#/definitions/Uint64"
        },
        {
          "type": "null"
        }
      ]
    },
    "max_spread": {
      "description": "The maximum spread used when swapping fee tokens to ORO",
      "anyOf": [
        {
          "$ref": "#/definitions/Decimal"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner": {
      "description": "Address that's allowed to change contract parameters",
      "type": "string"
    },
    "second_receiver_params": {
      "description": "The second receiver parameters of fees",
      "anyOf": [
        {
          "$ref": "#/definitions/SecondReceiverParams"
        },
        {
          "type": "null"
        }
      ]
    },
    "staking_contract": {
      "description": "The xORO staking contract address. If None then governance_contract must be set with 100% fee.",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use oroswap::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SecondReceiverParams": {
      "description": "This structure describes the parameters for updating the second receiver of fees.",
      "type": "object",
      "required": [
        "second_fee_receiver",
        "second_receiver_cut"
      ],
      "properties": {
        "second_fee_receiver": {
          "description": "The second fee receiver",
          "type": "string"
        },
        "second_receiver_cut": {
          "description": "The percentage of fees that go to the second fee receiver",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
