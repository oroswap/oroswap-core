{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MigrateMsg",
  "description": "This structure describes a migration message.",
  "type": "object",
  "properties": {
    "collect_cooldown": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "second_receiver_params": {
      "anyOf": [
        {
          "$ref": "#/definitions/SecondReceiverParams"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "SecondReceiverParams": {
      "description": "This structure describes the parameters for updating the second receiver of fees.",
      "type": "object",
      "required": [
        "second_fee_receiver",
        "second_receiver_cut"
      ],
      "properties": {
        "second_fee_receiver": {
          "description": "The second fee receiver",
          "type": "string"
        },
        "second_receiver_cut": {
          "description": "The percentage of fees that go to the second fee receiver",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
