{
  "contract_name": "oroswap-tokenfactory-tracker",
  "contract_version": "2.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "tokenfactory_module_address",
      "tracked_denom"
    ],
    "properties": {
      "tokenfactory_module_address": {
        "description": "The address of the token factory module",
        "type": "string"
      },
      "track_over_seconds": {
        "description": "Whether to track over blocks or seconds. If true, tracking over seconds is enabled. If false, tracking over blocks is enabled. Default is false.",
        "default": false,
        "type": "boolean"
      },
      "tracked_denom": {
        "description": "The denom of the token being tracked",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": null,
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Return the balance of the given address at the given time unit.",
        "type": "object",
        "required": [
          "balance_at"
        ],
        "properties": {
          "balance_at": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "unit": {
                "description": "Time unit can be either block height or timestamp. Query config.t to know which one is enabled.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return the total supply at the given time unit.",
        "type": "object",
        "required": [
          "total_supply_at"
        ],
        "properties": {
          "total_supply_at": {
            "type": "object",
            "properties": {
              "unit": {
                "description": "Time unit can be either block height or timestamp. Query config.t to know which one is enabled.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "SudoMsg",
    "oneOf": [
      {
        "description": "Sudo endpoint called by chain before sending tokens Errors returned by this endpoint will prevent the transaction from being sent",
        "type": "object",
        "required": [
          "block_before_send"
        ],
        "properties": {
          "block_before_send": {
            "type": "object",
            "required": [
              "amount",
              "from",
              "to"
            ],
            "properties": {
              "amount": {
                "description": "The amount and denom being sent",
                "allOf": [
                  {
                    "$ref": "#/definitions/Coin"
                  }
                ]
              },
              "from": {
                "description": "The address being sent from",
                "type": "string"
              },
              "to": {
                "description": "The address being sent to",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Sudo endpoint called by chain before sending tokens Errors returned by this endpoint will NOT prevent the transaction from being sent",
        "type": "object",
        "required": [
          "track_before_send"
        ],
        "properties": {
          "track_before_send": {
            "type": "object",
            "required": [
              "amount",
              "from",
              "to"
            ],
            "properties": {
              "amount": {
                "description": "The amount and denom being sent",
                "allOf": [
                  {
                    "$ref": "#/definitions/Coin"
                  }
                ]
              },
              "from": {
                "description": "The address being sent from",
                "type": "string"
              },
              "to": {
                "description": "The address being sent to",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "responses": {
    "balance_at": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "token_factory_module",
        "track_over_seconds",
        "tracked_denom"
      ],
      "properties": {
        "token_factory_module": {
          "description": "Token factory module address",
          "type": "string"
        },
        "track_over_seconds": {
          "description": "Whether to track over blocks or seconds. If true, tracking over seconds is enabled. If false, tracking over blocks is enabled.",
          "type": "boolean"
        },
        "tracked_denom": {
          "description": "Tracked denom",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "total_supply_at": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint128",
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
